# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# See https://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration

require 'airborne'
require 'artii'
require 'awesome_print'

RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true
  end

  # This option will default to `:apply_to_host_groups` in RSpec 4 (and will
  # have no way to turn it off -- the option exists only for backwards
  # compatibility in RSpec 3). It causes shared context metadata to be
  # inherited by the metadata hash of host groups and examples, rather than
  # triggering implicit auto-inclusion in groups with matching metadata.
  config.shared_context_metadata_behavior = :apply_to_host_groups

# The settings below are suggested to provide a good initial experience
# with RSpec, but feel free to customize to your heart's content.
=begin
  # This allows you to limit a spec run to individual examples or groups
  # you care about by tagging them with `:focus` metadata. When nothing
  # is tagged with `:focus`, all examples get run. RSpec also provides
  # aliases for `it`, `describe`, and `context` that include `:focus`
  # metadata: `fit`, `fdescribe` and `fcontext`, respectively.
  config.filter_run_when_matching :focus

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = "spec/examples.txt"

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  # https://rspec.info/features/3-12/rspec-core/configuration/zero-monkey-patching-mode/
  config.disable_monkey_patching!

  # This setting enables warnings. It's recommended, but in some cases may
  # be too noisy due to issues in dependencies.
  config.warnings = true

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = "doc"
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
=end

Airborne.configure do |config|
  config.base_url='https://api.restful-api.dev'
end

# config.before(:each) do |example|
#   puts "hook before"
# end

# config.after(:each) do |example|
#   puts "hook after"
# end

# config.before(:suite) do |example|
#   puts "hook before example"
# end

# config.after(:suite) do |example|
#   puts "hook after example"
# end

# at_exit do
#   puts "hook ketika semua example selesai dijalankan"
# end

# Define ANSI escape sequences for colors
RESET   = "\e[0m"
RED     = "\e[31m"
GREEN   = "\e[32m"
YELLOW  = "\e[33m"
BLUE    = "\e[34m"
MAGENTA = "\e[35m"
CYAN    = "\e[36m"
WHITE   = "\e[37m"

config.before(:suite) do
  # Code that will run before all examples (specs) in the suite

  # Create an instance of Artii with a specific font
  artii = Artii::Base.new(font: 'slant')

  # Text to be converted to ASCII art
  text = "JANCOK"

  # Convert text to ASCII art
  ascii_art = artii.asciify(text)

  # Print ASCII art
  puts ascii_art

  $total_passed = 0
  $total_failed = 0
end

config.before(:each) do |example|
  # Kode yang akan dijalankan sebelum setiap contoh spesifikasi
  # puts "Before hook: Setting up test environment"
  puts "#{BLUE}----------------------------------------------------------------#{RESET}"
  puts "#{MAGENTA}SCENARIO => #{RESET}" + example.description
end

config.after(:each) do |example|
  # Kode yang akan dijalankan setelah setiap contoh spesifikasi
  if example.exception.nil?
    puts "  RESULT => #{GREEN}Passed#{RESET}"
    $total_passed += 1
  else
    puts "  RESULT => #{RED}Failed#{RESET}"
    $total_failed += 1
  end

end

config.around(:each) do |example|
  # puts "#{BLUE}----------------------------------------------------------------#{RESET}"
  example.run
  # puts "#{BLUE}----------------------------------------------------------------#{RESET}"
end

config.after(:suite) do
  puts "#{BLUE}----------------------------------------------------------------#{RESET}"
  # Code that will run before all examples (specs) in the suite
  puts "Total #{GREEN}Passed#{RESET} Scenarios: #{GREEN}#{$total_passed}#{RESET}"
  puts "Total #{RED}Failed#{RESET} Scenarios: #{RED}#{$total_failed}#{RESET}"
end

at_exit do
  puts "#{BLUE}----------------------------------------------------------------#{RESET}"
  # Create an instance of Artii with a specific font
  artii = Artii::Base.new(font: 'slant')

  # Text to be converted to ASCII art
  text = "UDAH"

  # Convert text to ASCII art
  ascii_art = artii.asciify(text)

  # Print ASCII art
  puts ascii_art
end

end
